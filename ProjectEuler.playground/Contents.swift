// The following problems are presented on
// the project euler website. I

import UIKit

// Problem 1: If we list all the natural numbers below 10 that are multiples
// of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

func multiplesOf3And5() -> Int {
  var result = 0
  for x in 1..<1000  {
    if x % 3 == 0 || x % 5 == 0 {
      result += x
    }
  }
  return result
}

/// ANSWER is 233168 let problem1Answer = multiplesOf3And5()

// Problem 2: Each new term in the Fibonacci sequence is generated by adding
// the previous two terms. By starting with 1 and 2, the first 10 terms will
// be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.

func fibinacciGenerator(termCap: Double) -> [Double] {
  var a: Double = 0, b: Double = 1, c: Double = 0
  var result = [Double]()
  var cap = termCap
  
  while cap >= 0 {
    c = a + b
    a = b
    b = c
    
    result.append(c)
    cap -= 1
  }
  return result
}

func fibonacciEvenValueSumAdder(cap: Double) -> Double {
  let termArray = fibinacciGenerator(termCap: cap)
  var evenValue: Double = 0
  for term in termArray {
    if term.truncatingRemainder(dividingBy: 2) == 0 {
      evenValue += term
    }
  }
  return evenValue
}

/// ANSWER is 4613732 let evenFibSum = fibonacciEvenValueSumAdder(cap: 31)

// Problem 2: The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143?



func primeFinder() -> Double {
  return 0
}














